<?php

/**
 * @file
 * OAuth2.0 Core module, provide oauth2-php library linkage and default
 * setup, etc.
 */

/**
 * Recommend OAuth2.0 library version.
 */
define('OAUTH2_RECOMMEND_VERSION', 'Revision: 3d57d095d6');

/**
 * The default path of oauth2-php library path.
 */

//
// Note: THIS NEEDS TO BE GENERALISED ******************************************
//
define('OAUTH2_DEFAULT_LIBRARY_PATH', 'sites/default/modules/oauth2/oauth2-php');

/**
 * The default OAuth2.0 provider mode, DrupalOAuth2 or DrupalOAuth2Proxy.
 */
define('OAUTH2_DEFAULT_PROVIDER_MODE', 'DrupalOAuth2');

/**
 * Implements hook_help().
 */
function oauth2_help($section, $arg) {
  switch ($section) {
    case 'admin/structure/oauth2':
      $help = '<p>' . t("To use this module you'll need to <a href='!download-link'>download the library</a> from the <a href='!info-link'>oauth2-php website</a> and extract the contents into the  module's oauth2-php directory. Currently, the recommended version of the oauth2-php library is %recommended-version.", array(
        '!download-link' => url('http://code.google.com/p/oauth2-php/downloads/list'),
        '!info-link' => url('http://code.google.com/p/oauth2-php/'),
        '%recommended-version' => OAUTH2_RECOMMEND_VERSION
      )) . '</p>';

      return $help;
  }
}

/**
 * Implements hook_enable().
 */
function oauth2_enable() {
}

/**
 * Implements hook_menu().
 */
function oauth2_menu() {
  $items = array();
  $items['admin/structure/oauth2'] = array(
    'title' => 'OAuth2.0',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oauth2_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'oauth2.admin.inc',
  );

  $items['admin/structure/oauth2/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -99,
  );

  return $items;
}

/**
 * Implements hook_cron().
 */
function oauth2_cron() {

return;

  if (variable_get('oauth2_provider_mode', OAUTH2_DEFAULT_PROVIDER_MODE) == 'DrupalOAuth2') {
    // Clear legacy tokens.

    db_delete('oauth2_access_tokens')
  ->condition('expires', REQUEST_TIME, '<')
  ->execute();

    db_delete('oauth2_auth_codes')
  ->condition('expires', REQUEST_TIME, '<')
  ->execute();

    db_delete('oauth2_refresh_tokens')
  ->condition('expires', REQUEST_TIME, '<')
  ->execute();
  }
}

/**
 * Implements hook_user_logout().
 */
function oauth2_user_logout($account) {
  $session_id = session_id();
  if (isset($account->sid)) {
    $session_id = $account->sid;
  }
  oauth2_get_server()->expireSession($session_id);
}

/**
 * Get an OAuth2.0 server-side instance with given class name.
 *
 * @param $class_name
 *   (optional) The class name of target OAuth2.0 server-side class.
 * @param $params
 *   (optional) Additional parameters to pass to class construct.
 *
 * @return
 *   The OAuth2.0 server-side instance based on $class or default setup.
 */
function oauth2_get_server($class_name = NULL, $params = array()) {
  global $_oauth2_servers;

  if ($class_name == NULL) {
    $class_name = variable_get('oauth2_provider_mode', OAUTH2_DEFAULT_PROVIDER_MODE);
  }

  if (!isset($_oauth2_servers[$class_name]) || !$_oauth2_servers[$class_name] instanceof $class_name) {
    // Manually include OAUth2.inc as we will reuse the predefined token
    // lifetime default values.
    require_once DRUPAL_ROOT . '/' . variable_get('oauth2_library_path', OAUTH2_DEFAULT_LIBRARY_PATH) . "/lib/OAuth2.inc";

    $info = array(
      'access_token_lifetime' => variable_get('oauth2_access_token_lifetime', OAUTH2_DEFAULT_ACCESS_TOKEN_LIFETIME),
      'auth_code_lifetime' => variable_get('oauth2_auth_code_lifetime', OAUTH2_DEFAULT_AUTH_CODE_LIFETIME),
      'refresh_token_lifetime' => variable_get('oauth2_refresh_token_lifetime', OAUTH2_DEFAULT_REFRESH_TOKEN_LIFETIME),
      // We always display additional OAuth2.0 debug error message.
      'display_error' => TRUE,
    );
    $params = array_merge($info, $params);
    $_oauth2_servers[$class_name] = new $class_name($params);
  }

  return $_oauth2_servers[$class_name];
}

/**
 * Get an OAuth2.0 client-side instance with given node id.
 *
 * @param $nid
 *   The node id of target OAuth2.0 client-side class setup.
 * @param $params
 *   (optional) Additional parameters to pass to class construct.
 *
 * @return
 *   The OAuth2.0 client-side instance based on $nid.
 */
function oauth2_get_client($nid, $params = array()) {
  static $_oauth2_clients;

  if (!isset($_oauth2_clients[$nid]) || !$_oauth2_clients[$nid] instanceof DrupalOAuth2Client) {
    $info = (array) node_load($nid);
    $params = array_merge($info, $params);
    $_oauth2_clients[$nid] = new DrupalOAuth2Client($params);
  }

  return $_oauth2_clients[$nid];
}
