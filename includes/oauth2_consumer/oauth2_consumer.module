<?php

/**
 * @file
 * OAuth2.0 Consumer Support module, extend OAuth2.0 Server Identifer with
 * consumer support.
 */

/**
 * Implementation of hook_entity_info().
 */

function oauth2_consumer_entity_info() {
  return array(
      'oauth2_consumer' => array(
          'label' => t('OAuth2.0 Consumer'),
          'base table' => 'oauth2_consumers',
          //'uri callback' => 'oauth2_consumer_uri',
          'fieldable' => FALSE,
          'entity keys' => array(
              'id' => 'sid',
          ),
          /*'buddles' => array(
              'oauth2_server' => array(
                  'label' => 'OAuth2 Server Identifier',
                  'admin' => array(
                      'path' => 'admin/structure/oauth2/oauth2-server',
                      'access arguments' =>  array('administer site configuration')
                  )
              )
          ),*/
          'view modes' => array(
              'full' => array(
                  'label' => t('Consumers'),
                  'custom settings' => FALSE,
              ),
          ),
      ),
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function oauth2_consumer_form_oauth2_server_edit_form_alter(&$form, &$form_state, $form_id) {

  if (isset($form['#oauth2_server'])) {
    $oauth2_consumer = oauth2_consumer_load($form['#oauth2_server']->sid);
  } else {
    $oauth2_consumer = new StdClass(); //nothing
  }
  
  $form['oauth2_server']['oauth2_consumer'] = array(
      '#type' => 'fieldset',
      '#title' => t('Consumer settings'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#weight' => 10,
      'fields' => array(),
  );

  $form['oauth2_server']['oauth2_consumer']['username'] = array(
      '#type' => 'textfield',
      '#title' => t('Username'),
      '#description' => t('Your registered consumer account username.'),
      '#default_value' => isset($oauth2_consumer->username) ? $oauth2_consumer->username : '',
      '#required' => FALSE,
  );

  // Form element with type password will not pass in with default value
  // and so may flush existing password during form save. Here we
  // manually preserve original password with form hidden value.
  $form['oauth2_server']['oauth2_consumer']['password'] = array(
      '#type' => 'password',
      '#title' => t('Password'),
      '#description' => t('Your registered consumer account password. NOTE: This will store as plain text in database.'),
      '#required' => FALSE,
  );
  $form['password_orig'] = array(
      '#type' => 'hidden',
      '#value' => isset($oauth2_consumer->password) ? $oauth2_consumer->password : '',
  );

  $form['oauth2_server']['oauth2_consumer']['services_uri'] = array(
      '#type' => 'textfield',
      '#title' => t('Services endpoint'),
      '#description' => t('The remote server\'s HTTP endpoint capable of Drupal Service 3.x services. Absolute path or path relative to base URI.'),
      '#default_value' => isset($oauth2_consumer->services_uri) ? $oauth2_consumer->services_uri : '',
      '#required' => FALSE,
  );

  $form['oauth2_server']['oauth2_consumer']['expires_in'] = array(
      '#type' => 'textfield',
      '#title' => t('Cache lifetime (in seconds)'),
      '#description' => t('How long will OAuth2.0 cache query result within local cache. With a long cache lifetime can greatly reduce the loading of remote OAuth2.0 authorization server; by the way with a short cache lifetime can ensure the synchronize of access_token. To disable cache functionality, simply set this as 0.'),
      '#default_value' => isset($oauth2_consumer->expires_in) ? $oauth2_consumer->expires_in : 0,
      '#required' => TRUE,
  );
  
  $form['#validate'][] = 'oauth2_consumer_form_oauth2_server_edit_form_validate';
  $form['#submit'][] = 'oauth2_consumer_form_oauth2_server_edit_form_submit';

}
/**
 * validate oauth2_consumer_form_oauth2_server_edit_form_alter
 */
function oauth2_consumer_form_oauth2_server_edit_form_validate(&$form, &$form_state) {
  
}
/**
 * submit oauth2_consumer_form_oauth2_server_edit_form_alter
 */
function oauth2_consumer_form_oauth2_server_edit_form_submit(&$form, &$form_state) {
  // Reuse original password if no new password.
  if (empty($form_state['values']['password'])) {
    $form_state['values']['password'] =  $form_state['values']['password_orig'];
  }

  $consumer = array(
      'username'       => $form_state['values']['username'],
      'password'       => $form_state['values']['password'],
      'services_uri'   => $form_state['values']['services_uri'],
      'expires_in'     => $form_state['values']['expires_in'],
  );
  if ($form_state['values']['sid'] != NULL) {
    $consumer['sid'] = $form_state['values']['sid'];
  }
  oauth2_consumer_update($consumer);
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function oauth2_consumer_form_oauth2_server_delete_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'oauth2_consumer_form_oauth2_server_delete_form_submit';error_log('hihi');
}

/**
 * form delete
 */
function oauth2_consumer_form_oauth2_server_delete_form_submit(&$form, &$form_state) {
  oauth2_consumer_delete($form_state['values']['sid']);
}

/**
 * Update/Add a record
 */
function oauth2_consumer_update($consumer) {

  // We pack username and password as it may be SQL reservered words.
  $consumer['data'] = serialize(array(
      'username' => $consumer['username'],
      'password' => $consumer['password'],
  ));
  unset($consumer['username']);
  unset($consumer['password']);
  if (!isset($consumer['sid'])) {
    //Should not be here
    error_log('sid not set!');
  } else {

    db_merge('oauth2_consumers')
        ->key(array('sid' => $consumer['sid']))
        ->fields($consumer)
        ->execute();

  }
}

/**
 * Delete a record
 */
function oauth2_consumer_delete($sid) {

  db_query("DELETE FROM {oauth2_consumers} WHERE sid = :s", array(':s' => $sid));
}

/**
 * Load a record
 */
function oauth2_consumer_load($sid = NULL, $reset = FALSE) {
  $sids = (isset($sid) ? array($sid) : array());
  $oauth2_consumer = oauth2_consumer_load_multiple($sids,$reset);
  return $oauth2_consumer ? reset ($oauth2_consumer) : FALSE;
  
}
/**
 * Load multiple
 */
function oauth2_consumer_load_multiple($sids = array(), $conditions = array(), $reset = FALSE) {
  $consumers =  entity_load('oauth2_consumer',$sids,$conditions,$reset);
  foreach ($consumers as &$consumer) {
    // Remember to unpack username and password.
    $consumer = drupal_unpack($consumer);
  }
  unset($consumer);
  return $consumers;
}
/**
 * Useless. view not implemented for now
 */
/*function oauth2_consumer_view($node, $teaser = FALSE, $page = FALSE) {
  if ($node->type == 'oauth2_server') {
    $node = node_prepare($node, $teaser);

    $node->content['username'] = array(
        '#value' => theme('oauth2_consumer_username', $node->username),
        '#weight' => 10,
    );
    $node->content['services_uri'] = array(
        '#value' => theme('oauth2_consumer_services_uri', $node->services_uri),
        '#weight' => 11,
    );
    $node->content['expires_in'] = array(
        '#value' => theme('oauth2_consumer_expires_in', $node->expires_in),
        '#weight' => 12,
    );

    return $node;
  }
}*/

/**
 * Implementation of hook_theme().
 */
function oauth2_consumer_theme() {
  return array(
      'oauth2_consumer_username' => array(
          'arguments' => array('username' => '', 'teaser' => 0, 'page' => 0),
      ),
      'oauth2_consumer_services_uri' => array(
          'arguments' => array('services_uri' => '', 'teaser' => 0, 'page' => 0),
      ),
      'oauth2_consumer_expires_in' => array(
          'arguments' => array('expires_in' => '', 'teaser' => 0, 'page' => 0),
      ),
  );
}

/**
 * Returns HTML for field username.
 *
 * @ingroup themeable
 */
function theme_oauth2_consumer_username($username, $teaser = 0, $page = 0) {
  $output = '<div class="oauth2_consumer-info username">';
  $output .= t('Username: @username', array('@username' => $username));
  $output .= '</div>';
  return $output;
}

/**
 * Returns HTML for field service_uri.
 *
 * @ingroup themeable
 */
function theme_oauth2_consumer_services_uri($services_uri, $teaser = 0, $page = 0) {
  $output = '<div class="oauth2_consumer-info services_uri">';
  $output .= t('Services endpoint: @services_uri', array('@services_uri' => $services_uri));
  $output .= '</div>';
  return $output;
}

/**
 * Returns HTML for field expires_in.
 *
 * @ingroup themeable
 */
function theme_oauth2_consumer_expires_in($expires_in, $teaser = 0, $page = 0) {
  $output = '<div class="oauth2_consumer-info expires_in">';
  $output .= t('Cache lifetime (in seconds): @expires_in', array('@expires_in' => $expires_in));
  $output .= '</div>';
  return $output;
}
