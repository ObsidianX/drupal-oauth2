<?php

/**
 * @file
 * OAuth2.0 Consumer Support module, extend OAuth2.0 Server Identifer with
 * consumer support.
 */

/**
 * Implements hook_form_alter().
 *
 * Note: this should be converted into a hook_form_node_form_alter(),
 *       which will simplify the logic and be called less frequently
 *
 * @see http://drupal.org/node/224333#hook_form_BASE_FORM_ID_alter
 *
 */
function oauth2_consumer_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node'])) {
    $node = $form['#node'];

    if ($form['type']['#value'] . '_node_form' == $form_id && $node->type == 'oauth2_server') {
      $form['oauth2_server']['oauth2_consumer'] = array(
        '#type' => 'fieldset',
        '#title' => t('Consumer settings'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#weight' => 10,
        'fields' => array(),
      );

      $form['oauth2_server']['oauth2_consumer']['username'] = array(
        '#type' => 'textfield',
        '#title' => t('Username'),
        '#description' => t('Your registered consumer account username.'),
        '#default_value' => isset($node->username) ? $node->username : '',
        '#required' => FALSE,
      );

      // Form element with type password will not pass in with default value
      // and so may flush existing password during form save. Here we
      // manually preserve original password with form hidden value.
      $form['oauth2_server']['oauth2_consumer']['password'] = array(
        '#type' => 'password',
        '#title' => t('Password'),
        '#description' => t('Your registered consumer account password. NOTE: This will store as plain text in database.'),
        '#required' => FALSE,
      );
      $form['password_orig'] = array(
        '#type' => 'hidden',
        '#value' => isset($node->password) ? $node->password : '',
      );

      $form['oauth2_server']['oauth2_consumer']['services_uri'] = array(
        '#type' => 'textfield',
        '#title' => t('Services endpoint'),
        '#description' => t('The remote server\'s HTTP endpoint capable of Drupal Service 3.x services. Absolute path or path relative to base URI.'),
        '#default_value' => isset($node->services_uri) ? $node->services_uri : '',
        '#required' => FALSE,
      );

      $form['oauth2_server']['oauth2_consumer']['expires_in'] = array(
        '#type' => 'textfield',
        '#title' => t('Cache lifetime (in seconds)'),
        '#description' => t('How long will OAuth2.0 cache query result within local cache. With a long cache lifetime can greatly reduce the loading of remote OAuth2.0 authorization server; by the way with a short cache lifetime can ensure the synchronize of access_token. To disable cache functionality, simply set this as 0.'),
        '#default_value' => isset($node->expires_in) ? $node->expires_in : 0,
        '#required' => TRUE,
      );
    }
  }
}

/**
 * Implements hook_node_load().
 */
function oauth2_consumer_node_load($node, $types) {
  oauth2_consumer_load($node);
}

/**
 * Implements hook_node_insert().
 */
function oauth2_consumer_node_insert($node) {
  oauth2_consumer_insert($node);
}

/**
 * Implements hook_node_update().
 */
function oauth2_consumer_node_update($node) {
  oauth2_consumer_update($node);
}

/**
 * Implements hook_node_delete().
 */
function oauth2_consumer_node_delete($node) {
  oauth2_consumer_delete($node);
}

/**
 * Implements hook_node_revision_delete().
 */
function oauth2_consumer_node_revision_delete($node) {
  // Notice that we're matching a single revision based on the node's vid.
  db_delete('oauth2_consumers')
  ->condition('vid', $node->vid)
  ->execute();
}

/**
 * Implements hook_node_view().
 */
function oauth2_consumer_node_view($node, $view_mode = 'full') {
  //
  // Note: not redundant, as oauth2_consumer nodes are only displayed as part of oauth2_server nodes
  //
  oauth2_consumer_view($node, $view_mode);
}


/**
 * Implements hook_insert().
 */
function oauth2_consumer_insert($compound_node) {

  if ($compound_node->type == 'oauth2_server') {
  
    $node = new stdClass();
    $node->password = $compound_node->password;
    $node->password_orig = $compound_node->password_orig;
    $node->username = $compound_node->username;
    $node->nid = $compound_node->nid;
    $node->vid = $compound_node->vid;
    $node->revision = $compound_node->revision;
    $node->services_uri = $compound_node->services_uri;
    $node->expires_in = $compound_node->expires_in;

    // Reuse original password if no new password.
    $node->password = (!empty($node->password) && $node->password !== $node->password_orig)
      ? $node->password
      : $node->password_orig;
    // We pack username and password as it may be SQL reservered words.
    $node->data = serialize(array(
      'username' => $node->username,
      'password' => $node->password,
    ));
    drupal_write_record('oauth2_consumers', &$node);

  }
}

/**
 * Implements hook_update().
 */
function oauth2_consumer_update($compound_node) {

  if ($compound_node->type == 'oauth2_server') {

    $node = new stdClass();
    $node->password = $compound_node->password;
    $node->password_orig = $compound_node->password_orig;
    $node->username = $compound_node->username;
    $node->nid = $compound_node->nid;
    $node->vid = $compound_node->vid;
    $node->revision = $compound_node->revision;
    $node->services_uri = $compound_node->services_uri;
    $node->expires_in = $compound_node->expires_in;

    // Reuse original password if no new password.
    $node->password = (!empty($node->password) && $node->password !== $node->password_orig)
      ? $node->password
      : $node->password_orig;
    // We pack username and password as it may be SQL reservered words.
    $node->data = serialize(array(
      'username' => $node->username,
      'password' => $node->password,
    ));
    if ($node->revision) {
      drupal_write_record('oauth2_consumers', &$node, array('nid', 'vid'));
    }

    // We should not reach this point unless something has gotten out of sync!
    else {
      drupal_write_record('oauth2_consumers', &$node);
    }

  }
}

/**
 * Implements hook_delete().
 */
function oauth2_consumer_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_delete('oauth2_consumers')
  ->condition('nid', $node->nid)
  ->execute();
}

/**
 * Implements hook_load().
 */
function oauth2_consumer_load($nodes) {
  foreach ($nodes as $nid => $node) {

    $result = db_query("SELECT * FROM {oauth2_consumers} WHERE vid = :vid", array(':vid' => $node->vid));

    foreach ($result as $stmt) {   
      foreach ($stmt as $property => &$value) {
        $nodes[$node->nid]->$property = $value;
      }
      // Remember to unpack username and password.
      $temp = drupal_unpack($stmt);
      $nodes[$node->nid]->username = $temp->username;
      $nodes[$node->nid]->password = $temp->password;
    }
  }
}

/**
 * Implements hook_view().
 */
function oauth2_consumer_view($node, $view_mode = NULL) {
  if ($node->type == 'oauth2_server') {

    $node->content['username'] = array(
      '#markup' => theme('oauth2_consumer_username', array('username' => $node->username)),
      '#weight' => 10,
    );
    $node->content['services_uri'] = array(
      '#markup' => theme('oauth2_consumer_services_uri', array('services_uri' => $node->services_uri)),
      '#weight' => 11,
    );
    $node->content['expires_in'] = array(
      '#markup' => theme('oauth2_consumer_expires_in', array('expires_in' => $node->expires_in)),
      '#weight' => 12,
    );

    return $node;
  }
}

/**
 * Implements hook_theme().
 */
function oauth2_consumer_theme() {
  return array(
    'oauth2_consumer_username' => array(
      'variables' => array('username' => '', 'teaser' => 0, 'page' => 0),
    ),
    'oauth2_consumer_services_uri' => array(
      'variables' => array('services_uri' => '', 'teaser' => 0, 'page' => 0),
    ),
    'oauth2_consumer_expires_in' => array(
      'variables' => array('expires_in' => '', 'teaser' => 0, 'page' => 0),
    ),
  );
}

/**
 * Returns HTML for field username.
 *
 * @ingroup themeable
 */
function theme_oauth2_consumer_username($variables) {
  $username = $variables['username'];
  $teaser = $variables['teaser'];
  $page = $variables['page'];
  $output = '<div class="oauth2_consumer-info username">';
  $output .= t('Username: @username', array('@username' => $username));
  $output .= '</div>';
  return $output;
}

/**
 * Returns HTML for field service_uri.
 *
 * @ingroup themeable
 */
function theme_oauth2_consumer_services_uri($variables) {
  $services_uri = $variables['services_uri'];
  $teaser = $variables['teaser'];
  $page = $variables['page'];
  $output = '<div class="oauth2_consumer-info services_uri">';
  $output .= t('Services endpoint: @services_uri', array('@services_uri' => $services_uri));
  $output .= '</div>';
  return $output;
}

/**
 * Returns HTML for field expires_in.
 *
 * @ingroup themeable
 */
function theme_oauth2_consumer_expires_in($variables) {
  $expires_in = $variables['expires_in'];
  $teaser = $variables['teaser'];
  $page = $variables['page'];
  $output = '<div class="oauth2_consumer-info expires_in">';
  $output .= t('Cache lifetime (in seconds): @expires_in', array('@expires_in' => $expires_in));
  $output .= '</div>';
  return $output;
}