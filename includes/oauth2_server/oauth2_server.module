<?php

/**
 * @file
 * The OAuth2.0 Server Identifer as Drupal entity.
 */

/**
 * Implements hook_init().
 */
function oauth2_server_init() {

}
/**
 * Implements hook_user_logout().
 */
function oauth2_server_user_logout() {
  if (variable_get('oauth2_provider_mode', OAUTH2_DEFAULT_PROVIDER_MODE) == 'DrupalOAuth2Client' && variable_get('oauth2_client_server_identifier')) {
    $sid = variable_get('oauth2_client_server_identifier');
    $client = oauth2_get_client($sid);

    //tell the server to expire the session(access token,etc)
    $client->expireSession();

    //flush the oauth2 session
    $client->setSession();
  }
}

/**
 * Implements hook_help().
 */
function oauth2_server_help($section, $arg) {
  switch ($section) {
    case 'admin/structure/oauth2/oauth2-server':
      $help = '<p>'. t("An <a href='!oauth2_server'>OAuth2.0 Server Identifer</a> contain the target OAuth2.0 provider information, including client_id, client_secret, authorize_uri and access_token_uri, etc.", array(
      '!oauth2_server' => url('oauth2-server/add'),
      )) .'</p>';
      return $help;
  }
}

/**
 * Implements hook_menu().
 */
function oauth2_server_menu() {
  $items = array();

  $items['admin/structure/oauth2/oauth2-server'] = array(
      'title' => 'Servers',
      'description' => 'List, add, and edit OAuth2.0 Server Identifer.',
      'page callback' => 'oauth2_server_admin_callback',
      'access arguments' => array('administer site configuration'),
      'file' => 'oauth2_server.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => -10,
  );

  $items['oauth2-server/%oauth2_server'] = array(
      'title' => 'View OAuth2 Server Identifier',
      'page callback' => 'oauth2_server_view_callback',
      'page arguments' => array(1),
      'access callback' => 'oauth2_server_access',
      'access arguments' => array('edit',1),
      'file' => 'oauth2_server.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 0,
  );

  $items['oauth2-server/add'] = array(
      'title' => 'Add OAuth2 Server Identifier',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('oauth2_server_edit_form'),
      'access callback' => 'oauth2_server_access',
      'access arguments' => array('create',1),
      'file' => 'oauth2_server.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 0,
  );

  $items['oauth2-server/%oauth2_server/edit'] = array(
      'title' => 'Edit OAuth2 Server Identifier',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('oauth2_server_edit_form', 1),
      'access callback' => 'oauth2_server_access',
      'access arguments' => array('edit',1),
      'file' => 'oauth2_server.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 0,
  );

  $items['oauth2-server/%oauth2_server/delete'] = array(
      'title' => 'Delete OAuth2 Server Identifier',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('oauth2_server_delete_form', 1),
      'access callback' => 'oauth2_server_access',
      'access arguments' => array('delete',1),
      'file' => 'oauth2_server.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 0,
  );

  $items['user/%/oauth2/edit'] = array(
      'title' => 'Account',
      'page callback' => 'oauth2_server_user_edit',
      'page arguments' => array(1),
      'access callback' => 'user_edit_access',
      'access arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
      'file' => 'oauth2_server.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_entity_info().
 */

function oauth2_server_entity_info() {
  return array(
      'oauth2_server' => array(
          'label' => t('OAuth2.0 Server Identifer'),
          'base table' => 'oauth2_servers',
          'uri callback' => 'oauth2_server_uri',
          'fieldable' => FALSE,
          'entity keys' => array(
              'id' => 'sid',
          ),
          'buddles' => array(
              'oauth2_server' => array(
                  'label' => 'OAuth2 Server Identifier',
                  'admin' => array(
                      'path' => 'admin/structure/oauth2/oauth2-server',
                      'access arguments' =>  array('administer site configuration')
                  )
              )
          ),
          'view modes' => array(
              'full' => array(
                  'label' => t('Servers'),
                  'custom settings' => FALSE,
              ),
          ),
      ),
  );
}

/**
 * Entity uri callback
 */
function oauth2_server_uri($server) {
  return array(
      'path' => 'oauth2-server/' . $server->sid
  );
}


/**
 * Implements hook_permission().
 */
function oauth2_server_permission() {
  return array(
      'create oauth2_server' => array(
          'title' => t('Create new server')
      ),
      /*'delete own oauth2_server' => array(
       'title' => t('Delete own server')
      ),*/
      'delete any oauth2_server' => array(
          'title' => t('Delete any server')
      ),
      /*'edit own oauth2_server' => array(
       'title' => t('Edit own server')
      ),*/
      'edit any oauth2_server' => array(
          'title' => t('Edit any server')
      ),
  );
}

/**
 * @param $op
 *   The operation that is to be performed on the server.
 * @param $server
 *   The server object.
 * @return
 *   TRUE if the current user has access to the server, FALSE otherwise.
 */
function oauth2_server_access($op, $server) {
  global $user;
  if ($op == 'create') {
    // Anonymous users cannot post even if they have the permission.
    return user_access('create oauth2_server', $user) && $user->uid ? TRUE : NULL;
  }

  if ($op == 'edit') {
    if (user_access('edit any oauth2_server', $user)) { // || (user_access('edit own oauth2_server', $user) && ($user->uid == $server->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any oauth2_server', $user)) { // || (user_access('delete own oauth2_server', $user) && ($user->uid == $server->uid))) {
      return TRUE;
    }
  }
  return false;
}

/**
 * Update/Add a record
 */
function oauth2_server_update($oauth2_server) {
  if (!isset($oauth2_server['sid'])) {
    drupal_write_record('oauth2_servers', $oauth2_server);
  } else {
    drupal_write_record('oauth2_servers', $oauth2_server, 'sid');
  }
  return $oauth2_server['sid'];
}

/**
 * Delete a record
 */
function oauth2_server_delete($sid) {
  db_query("DELETE FROM {oauth2_servers} WHERE sid = :d", array(':d' => $sid));
}

/**
 * Load a record
 */
function oauth2_server_load($sid = NULL, $reset = FALSE) {
  $sids = (isset($sid) ? array($sid) : array());
  $oauth2_server = oauth2_server_load_multiple($sids, $reset);
  return $oauth2_server ? reset ($oauth2_server) : FALSE;
}

/**
 * Load multiple
 */
function oauth2_server_load_multiple($sids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('oauth2_server', $sids, $conditions, $reset);
}

/**
 * Implements hook_block_info().
 */
function oauth2_server_block_info() {
$blocks = array();
  if (variable_get('oauth2_provider_mode', OAUTH2_DEFAULT_PROVIDER_MODE) == 'DrupalOAuth2Client' && variable_get('oauth2_client_server_identifier')) {
    $blocks['oauth2_login'] = array();
    $blocks['oauth2_login']['info'] = t('OAuth2 Login');
    $blocks['oauth2_login']['cache'] = DRUPAL_NO_CACHE;
  }
  return $blocks;
}

function oauth2_server_block_view($delta = '') {
  if (variable_get('oauth2_provider_mode', OAUTH2_DEFAULT_PROVIDER_MODE) == 'DrupalOAuth2Client' && variable_get('oauth2_client_server_identifier')) {
    $sid = variable_get('oauth2_client_server_identifier');

    $client = oauth2_get_client($sid);
    switch ($delta) {
      case 'oauth2_login':
        $links = array (
        'link_redirect' => array(
        'title' => 'OAuth2 Login (Redirect)',
        'href' => $client->getLoginUri(),
        //'href' => $server->base_uri.$server->authorize_uri.'?response_type=code&client_id='.$server->client_id.'&redirect_uri='.url('<front>',array('absolute' => TRUE)),
        ),
        );
        $block['subject'] = t('OAuth2 login');
        $block['content'] = array(
            'link' => array(
                '#theme'  => 'links',
                '#text'   => 'OAuth2 Login',
                '#links'   => $links,
                '#options' => array(
                    'attributes' => array(),
                    //REQUIRED:
                    'html' => FALSE,
                )
            ),

        );

        return $block;
    }
  }
}



/**
 * Implements hook_theme().
 */
/*function oauth2_server_theme() {
 return array(
     'oauth2_server_server_id' => array(
         'arguments' => array('server_id' => '', 'teaser' => 0, 'page' => 0),
     ),
     'oauth2_server_base_uri' => array(
         'arguments' => array('base_uri' => '', 'teaser' => 0, 'page' => 0),
     ),
     'oauth2_server_client_id' => array(
         'arguments' => array('client_id' => '', 'teaser' => 0, 'page' => 0),
     ),
     'oauth2_server_client_secret' => array(
         'arguments' => array('client_secret' => '', 'teaser' => 0, 'page' => 0),
     ),
     'oauth2_server_authorize_uri' => array(
         'arguments' => array('authorize_uri' => '', 'teaser' => 0, 'page' => 0),
     ),
     'oauth2_server_access_token_uri' => array(
         'arguments' => array('access_token_uri' => '', 'teaser' => 0, 'page' => 0),
     ),
 );
}*/

/**
 * Returns HTML for field server_id.
 *
 * @ingroup themeable
 */
/*function theme_oauth2_server_server_id($server_id, $teaser = 0, $page = 0) {
 $output = '<div class="oauth2_server-info server_id">';
 $output .= t('Server ID: @server_id', array('@server_id' => $server_id));
 $output .= '</div>';
 return $output;
 }*/

/**
 * Returns HTML for field base_uri.
 *
 * @ingroup themeable
 */
/*function theme_oauth2_server_base_uri($base_uri, $teaser = 0, $page = 0) {
 $output = '<div class="oauth2_server-info base_uri">';
 $output .= t('Base URI: @base_uri', array('@base_uri' => $base_uri));
 $output .= '</div>';
 return $output;
 }*/

/**
 * Returns HTML for field client_id.
 *
 * @ingroup themeable
 */
/*function theme_oauth2_server_client_id($client_id, $teaser = 0, $page = 0) {
 $output = '<div class="oauth2_server-info client_id">';
 $output .= t('Application ID: @client_id', array('@client_id' => $client_id));
 $output .= '</div>';
 return $output;
 }*/

/**
 * Returns HTML for field client_secret.
 *
 * @ingroup themeable
 */
/*function theme_oauth2_server_client_secret($client_secret, $teaser = 0, $page = 0) {
 $output = '<div class="oauth2_server-info client_secret">';
 $output .= t('Application Secret: @client_secret', array('@client_secret' => $client_secret));
 $output .= '</div>';
 return $output;
 }*/

/**
 * Returns HTML for field authorize_uri.
 *
 * @ingroup themeable
 */
/*function theme_oauth2_server_authorize_uri($authorize_uri, $teaser = 0, $page = 0) {
 $output = '<div class="oauth2_server-info authorize_uri">';
 $output .= t('End-user authorization endpoint: @authorize_uri', array('@authorize_uri' => $authorize_uri));
 $output .= '</div>';
 return $output;
 }*/

/**
 * Returns HTML for field access_token_uri.
 *
 * @ingroup themeable
 */
/*function theme_oauth2_server_access_token_uri($access_token_uri, $teaser = 0, $page = 0) {
 $output = '<div class="oauth2_server-info access_token_uri">';
 $output .= t('Token endpoint: @access_token_uri', array('@access_token_uri' => $access_token_uri));
 $output .= '</div>';
 return $output;
 }*/
