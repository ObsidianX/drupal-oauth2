<?php

/**
 * @file
 * The OAuth2.0 Server Identifer as Drupal node.
 */

/**
 * Implements hook_help().
 */
function oauth2_server_help($section, $arg) {
  switch ($section) {
    case 'admin/structure/oauth2/oauth2_server':
      $help = '<p>' . t("An <a href='!oauth2_server'>OAuth2.0 Server Identifer</a> contain the target OAuth2.0 provider information, including client_id, client_secret, authorize_uri and access_token_uri, etc.", array(
        '!oauth2_server' => url('node/add/oauth2-server'),
      )) . '</p>';
      return $help;
  }
}

/**
 * Implements hook_menu().
 */
function oauth2_server_menu() {
  $items = array();

  $items['admin/structure/oauth2/oauth2_server'] = array(
    'title' => 'Servers',
    'description' => 'List, add, and edit OAuth2.0 Server Identifer.',
    'page callback' => 'oauth2_server_admin_callback',
    'access arguments' => array('administer site configuration'),
    'file' => 'oauth2_server.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Implements hook_node_info().
 */
function oauth2_server_node_info() {
  return array(
    'oauth2_server' => array(
      'name' => t('OAuth2.0 Server Identifer'),
      'base' => 'oauth2_server',
      'description' => t('An <em>OAuth2.0 Server Identifer</em> contain the target OAuth2.0 provider information, including client_id, client_secret, authorize_uri and access_token_uri, etc.'),
      'has_title' => TRUE,
      'title_label' => t('Server Name'),
      'has_body' => TRUE,
      'body_label' => t('Description'),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function oauth2_server_permission() {
  return array(
    'create oauth2_server' => array(
      'title' => t('create oauth2_server'),
      'description' => t('TODO Add a description for \'create oauth2_server\''),
    ),
    'delete own oauth2_server' => array(
      'title' => t('delete own oauth2_server'),
      'description' => t('TODO Add a description for \'delete own oauth2_server\''),
    ),
    'delete any oauth2_server' => array(
      'title' => t('delete any oauth2_server'),
      'description' => t('TODO Add a description for \'delete any oauth2_server\''),
    ),
    'edit own oauth2_server' => array(
      'title' => t('edit own oauth2_server'),
      'description' => t('TODO Add a description for \'edit own oauth2_server\''),
    ),
    'edit any oauth2_server' => array(
      'title' => t('edit any oauth2_server'),
      'description' => t('TODO Add a description for \'edit any oauth2_server\''),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function oauth2_server_node_access($node, $op, $account) {
  if ($op == 'create') {
    // Anonymous users cannot post even if they have the permission.
    return user_access('create oauth2_server', $account) && $account->uid ?  NODE_ACCESS_ALLOW : NODE_ACCESS_DENY;
  }

  if ($op == 'update') {
    if (user_access('edit any oauth2_server', $account) || (user_access('edit own oauth2_server', $account) && ($account->uid == $node->uid))) {
      return NODE_ACCESS_ALLOW;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any oauth2_server', $account) || (user_access('delete own oauth2_server', $account) && ($account->uid == $node->uid))) {
      return NODE_ACCESS_ALLOW;
    }
  }
}

/**
 * Implements hook_form().
 */
function oauth2_server_form(&$node) {
  $type = node_type_get_type($node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#maxlength' => 255,
      '#weight' => -5,
    );
  }

  if ($type->has_body) {
    $node_array = get_object_vars($node);
    if (array_key_exists('content', $node_array)) {
      $form['body_field'] = $node->content['body'];
    }
  }

  $form['oauth2_server'] = array(
    '#type' => 'fieldset',
    '#title' => t('OAuth2.0 settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['oauth2_server']['server_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Server ID'),
    '#description' => t('The OAuth2.0 <em>server_id</em>.'),
    '#default_value' => isset($node->server_id) ? $node->server_id : '',
    '#required' => TRUE,
  );

  $form['oauth2_server']['base_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('Base URI'),
    '#description' => t('The authorization server\'s HTTP base URI, typically to the front page.'),
    '#default_value' => isset($node->base_uri) ? $node->base_uri : '',
    '#required' => TRUE,
  );

  $form['oauth2_server']['client_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Application ID'),
    '#description' => t('Your registered OAuth2.0 <em>client_id</em>.'),
    '#default_value' => isset($node->client_id) ? $node->client_id : '',
    '#required' => FALSE,
  );

  $form['oauth2_server']['client_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Application Secret'),
    '#description' => t('Your registered OAuth2.0 <em>client_secret</em>.'),
    '#default_value' => isset($node->client_secret) ? $node->client_secret : '',
    '#required' => FALSE,
  );

  $form['oauth2_server']['authorize_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('End-user authorization endpoint'),
    '#description' => t('The authorization server\'s HTTP endpoint capable of authenticating the end-user and obtaining authorization. Absolute path or path relative to base URI.'),
    '#default_value' => isset($node->authorize_uri) ? $node->authorize_uri : '',
    '#required' => FALSE,
  );

  $form['oauth2_server']['access_token_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('Token endpoint'),
    '#description' => t('The authorization server\'s HTTP endpoint capable of issuing tokens and refreshing expired tokens. Absolute path or path relative to base URI.'),
    '#default_value' => isset($node->access_token_uri) ? $node->access_token_uri : '',
    '#required' => FALSE,
  );

  return $form;
}

/**
 * Implements hook_validate().
 */
function oauth2_server_validate($node) {
  $pattern = '/^[a-z0-9-_]{3,64}$/i';
  if (!empty($node->server_id) && !preg_match($pattern, $node->server_id)) {
    form_set_error('server_id', t('Server ID should be alphanumeric strings with hyphens and underscores, 3-64 characters long.'));
  }

  $query = db_select('oauth2_servers', 'osrv');
  $query->innerJoin('node', 'n', 'osrv.vid = n.vid');
  $query->fields('n', array('nid'));
  $query->condition('osrv.server_id', $node->server_id, '=');
  $query->condition('n.nid', $node->nid, '<>');

  $result = $query->execute()->rowCount();

  if ($result != 0) {
    form_set_error('server_id', t('This Server ID had beed used by other server identifer.'));
  }
}

/**
 * Implements hook_insert().
 */
function oauth2_server_insert($node) {
  drupal_write_record('oauth2_servers', $node);
}

/**
 * Implements hook_update().
 */
function oauth2_server_update($node) {
  if ($node->revision) {
    oauth2_server_insert($node);
  }
  else {
    drupal_write_record('oauth2_servers', $node, 'vid');
  }
}

/**
 * Implements hook_node_revision_delete().
 */
function oauth2_server_node_revision_delete($node) {
  // Notice that we're matching a single revision based on the node's vid.
  db_delete('oauth2_servers')
  ->condition('vid', $node->vid)
  ->execute();
}

/**
 * Implements hook_delete().
 */
function oauth2_server_delete(&$node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_delete('oauth2_servers')
  ->condition('nid', $node->nid)
  ->execute();
}

/**
 * Implements hook_load().
 */
function oauth2_server_load(&$nodes) {

  foreach ($nodes as $nid => $node) {
    $query = db_select('oauth2_servers', 'osrv');
    $query->fields('osrv', array('server_id', 'client_id', 'client_secret', 'base_uri', 'authorize_uri', 'access_token_uri'));
    $query->condition('osrv.vid', $node->vid, '=');

    $result = $query->execute();

    foreach ($result as $additions) {
      foreach ($additions as $property => &$value) {
        $nodes[$nid]->$property = $value;
      }
    }
  }
}

/**
 * Implements hook_view().
 */
function oauth2_server_view($node, $teaser = FALSE, $page = FALSE) {
  $node->content['server_id'] = array(
    '#markup' => theme('oauth2_server_server_id', array('server_id' => $node->server_id)),
    '#weight' => -10,
  );
  $node->content['base_uri'] = array(
    '#markup' => theme('oauth2_server_base_uri', array('base_uri' => $node->base_uri)),
    '#weight' => -9,
  );
  $node->content['client_id'] = array(
    '#markup' => theme('oauth2_server_client_id', array('client_id' => $node->client_id)),
    '#weight' => -8,
  );
  $node->content['client_secret'] = array(
    '#markup' => theme('oauth2_server_client_secret', array('client_secret' => $node->client_secret)),
    '#weight' => -7,
  );
  $node->content['authorize_uri'] = array(
    '#markup' => theme('oauth2_server_authorize_uri', array('authorize_uri' => $node->authorize_uri)),
    '#weight' => -6,
  );
  $node->content['access_token_uri'] = array(
    '#markup' => theme('oauth2_server_access_token_uri', array('access_token_uri' => $node->access_token_uri)),
    '#weight' => -5,
  );

  return $node;
}

/**
 * Implements hook_theme().
 */
function oauth2_server_theme() {
  return array(
    'oauth2_server_server_id' => array(
      'variables' => array('server_id' => '', 'teaser' => 0, 'page' => 0),
    ),
    'oauth2_server_base_uri' => array(
      'variables' => array('base_uri' => '', 'teaser' => 0, 'page' => 0),
    ),
    'oauth2_server_client_id' => array(
      'variables' => array('client_id' => '', 'teaser' => 0, 'page' => 0),
    ),
    'oauth2_server_client_secret' => array(
      'variables' => array('client_secret' => '', 'teaser' => 0, 'page' => 0),
    ),
    'oauth2_server_authorize_uri' => array(
      'variables' => array('authorize_uri' => '', 'teaser' => 0, 'page' => 0),
    ),
    'oauth2_server_access_token_uri' => array(
      'variables' => array('access_token_uri' => '', 'teaser' => 0, 'page' => 0),
    ),
  );
}

/**
 * Returns HTML for field server_id.
 *
 * @ingroup themeable
 */
function theme_oauth2_server_server_id($variables) {
  $server_id = $variables['server_id'];
  $teaser = $variables['teaser'];
  $page = $variables['page'];
  $output = '<div class="oauth2_server-info server_id">';
  $output .= t('Server ID: @server_id', array('@server_id' => $server_id));
  $output .= '</div>';
  return $output;
}

/**
 * Returns HTML for field base_uri.
 *
 * @ingroup themeable
 */
function theme_oauth2_server_base_uri($variables) {
  $base_uri = $variables['base_uri'];
  $teaser = $variables['teaser'];
  $page = $variables['page'];
  $output = '<div class="oauth2_server-info base_uri">';
  $output .= t('Base URI: @base_uri', array('@base_uri' => $base_uri));
  $output .= '</div>';
  return $output;
}

/**
 * Returns HTML for field client_id.
 *
 * @ingroup themeable
 */
function theme_oauth2_server_client_id($variables) {
  $client_id = $variables['client_id'];
  $teaser = $variables['teaser'];
  $page = $variables['page'];
  $output = '<div class="oauth2_server-info client_id">';
  $output .= t('Application ID: @client_id', array('@client_id' => $client_id));
  $output .= '</div>';
  return $output;
}

/**
 * Returns HTML for field client_secret.
 *
 * @ingroup themeable
 */
function theme_oauth2_server_client_secret($variables) {
  $client_secret = $variables['client_secret'];
  $teaser = $variables['teaser'];
  $page = $variables['page'];
  $output = '<div class="oauth2_server-info client_secret">';
  $output .= t('Application Secret: @client_secret', array('@client_secret' => $client_secret));
  $output .= '</div>';
  return $output;
}

/**
 * Returns HTML for field authorize_uri.
 *
 * @ingroup themeable
 */
function theme_oauth2_server_authorize_uri($variables) {
  $authorize_uri = $variables['authorize_uri'];
  $teaser = $variables['teaser'];
  $page = $variables['page'];
  $output = '<div class="oauth2_server-info authorize_uri">';
  $output .= t('End-user authorization endpoint: @authorize_uri', array('@authorize_uri' => $authorize_uri));
  $output .= '</div>';
  return $output;
}

/**
 * Returns HTML for field access_token_uri.
 *
 * @ingroup themeable
 */
function theme_oauth2_server_access_token_uri($variables) {
  $access_token_uri = $variables['access_token_uri'];
  $teaser = $variables['teaser'];
  $page = $variables['page'];
  $output = '<div class="oauth2_server-info access_token_uri">';
  $output .= t('Token endpoint: @access_token_uri', array('@access_token_uri' => $access_token_uri));
  $output .= '</div>';
  return $output;
}