<?php

/**
 * @file
 * The OAuth2.0 Server Identifer as Drupal entity.
 */

/**
 * Implementation of hook_help().
 */
function oauth2_server_help($section, $arg) {
  switch ($section) {
    case 'admin/structure/oauth2/oauth2_server':
      $help = '<p>'. t("An <a href='!oauth2_server'>OAuth2.0 Server Identifer</a> contain the target OAuth2.0 provider information, including client_id, client_secret, authorize_uri and access_token_uri, etc.", array(
        '!oauth2_server' => url('node/add/oauth2-server'),
      )) .'</p>';
      return $help;
  }
}

/**
 * Implementation of hook_menu().
 */
function oauth2_server_menu() {
  $items = array();

  $items['admin/structure/oauth2/oauth2-server'] = array(
    'title' => 'Servers',
    'description' => 'List, add, and edit OAuth2.0 Server Identifer.',
    'page callback' => 'oauth2_server_admin_callback',
    'access arguments' => array('administer site configuration'),
    'file' => 'oauth2_server.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );

  $items['oauth2-server/%oauth2_server'] = array(
      'title' => 'View OAuth2 Server Identifier',
      'page callback' => 'oauth2_server_view_callback',
      'page arguments' => array(1),
      'access callback' => 'oauth2_server_access',
      'access arguments' => array('edit',1),
      'type' => MENU_LOCAL_TASK,
      'weight' => 0,
  );

  $items['oauth2-server/add'] = array(
      'title' => 'Adit OAuth2 Server Identifier',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('oauth2_server_edit_form'),
      'access callback' => 'oauth2_server_access',
      'access arguments' => array('create',1),
      'type' => MENU_LOCAL_TASK,
      'weight' => 0,
  );

  $items['oauth2-server/%oauth2_server/edit'] = array(
      'title' => 'Edit OAuth2 Server Identifier',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('oauth2_server_edit_form', 1),
      'access callback' => 'oauth2_server_access',
      'access arguments' => array('edit',1),
      'type' => MENU_LOCAL_TASK,
      'weight' => 0,
  );
  
  $items['oauth2-server/%oauth2_server/delete'] = array(
      'title' => 'Edit OAuth2 Server Identifier',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('oauth2_server_delete_form', 1),
      'access callback' => 'oauth2_server_access',
      'access arguments' => array('delete',1),
      'type' => MENU_LOCAL_TASK,
      'weight' => 0,
  );

  return $items;
}

/**
 * Implementation of hook_entity_info().
 */

function oauth2_server_entity_info() {
  return array(
      'oauth2_server' => array(
          'label' => t('OAuth2.0 Server Identifer'),
          'base table' => 'oauth2_server',
          'uri callback' => 'oauth2_server_uri',
          'fieldable' => FALSE,
          'entity keys' => array(
            'id' => 'sid',
          ),
          'buddles' => array(),
          'view modes' => array(
            'full' => array(
                'label' => t('Servers'),
                'custom settings' => FALSE,
            ),
          ),
      ),
  );
}

/**
 * Entity uri callback
 */
function oauth2_server_uri($server) {
  return array(
     'path' => 'oauth2_server/' . $server->sid
  );
}


/**
 * Implementation of hook_permission().
 */
function oauth2_server_permission() {
  return array(
    'create oauth2_server' => array(
        'title' => t('Create new server')
     ),
    'delete own oauth2_server' => array(
        'title' => t('Delete own server')
     ),
    'delete any oauth2_server' => array(
        'title' => t('Delete any server')
     ),
    'edit own oauth2_server' => array(
        'title' => t('Edit own server')
     ),
    'edit any oauth2_server' => array(
        'title' => t('Edit any server')
     ),
  );
}

/**
 * @param $op
 *   The operation that is to be performed on the server. 
 * @param $server
 *   The server object.
 * @return
 *   TRUE if the current user has access to the server, FALSE otherwise.
 */
function oauth2_server_access($op, $server) {
  global $user;
  if ($op == 'create') {
    // Anonymous users cannot post even if they have the permission.
    return user_access('create oauth2_server', $user) && $user->uid ? TRUE : NULL;
  }

  if ($op == 'update') {
    if (user_access('edit any oauth2_server', $user) || (user_access('edit own oauth2_server', $user) && ($user->uid == $server->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any oauth2_server', $user) || (user_access('delete own oauth2_server', $user) && ($user->uid == $server->uid))) {
      return TRUE;
    }
  }
  return false;
}

/**
 * Implementation of hook_form().
 */
/*function oauth2_server_form(&$node) {
  $type = node_get_types('type', $node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#maxlength' => 255,
      '#weight' => -5,
    );
  }

  if ($type->has_body) {
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  }

  $form['oauth2_server'] = array(
    '#type' => 'fieldset',
    '#title' => t('OAuth2.0 settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['oauth2_server']['server_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Server ID'),
    '#description' => t('The OAuth2.0 <em>server_id</em>.'),
    '#default_value' => isset($node->server_id) ? $node->server_id : '',
    '#required' => TRUE,
  );

  $form['oauth2_server']['base_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('Base URI'),
    '#description' => t('The authorization server\'s HTTP base URI, typically to the front page.'),
    '#default_value' => isset($node->base_uri) ? $node->base_uri : '',
    '#required' => TRUE,
  );

  $form['oauth2_server']['client_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Application ID'),
    '#description' => t('Your registered OAuth2.0 <em>client_id</em>.'),
    '#default_value' => isset($node->client_id) ? $node->client_id : '',
    '#required' => FALSE,
  );

  $form['oauth2_server']['client_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Application Secret'),
    '#description' => t('Your registered OAuth2.0 <em>client_secret</em>.'),
    '#default_value' => isset($node->client_secret) ? $node->client_secret : '',
    '#required' => FALSE,
  );

  $form['oauth2_server']['authorize_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('End-user authorization endpoint'),
    '#description' => t('The authorization server\'s HTTP endpoint capable of authenticating the end-user and obtaining authorization. Absolute path or path relative to base URI.'),
    '#default_value' => isset($node->authorize_uri) ? $node->authorize_uri : '',
    '#required' => FALSE,
  );

  $form['oauth2_server']['access_token_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('Token endpoint'),
    '#description' => t('The authorization server\'s HTTP endpoint capable of issuing tokens and refreshing expired tokens. Absolute path or path relative to base URI.'),
    '#default_value' => isset($node->access_token_uri) ? $node->access_token_uri : '',
    '#required' => FALSE,
  );

  return $form;
}*/

/**
 * Implementation of hook_validate().
 */
/*function oauth2_server_validate($node) {
  $pattern = '/^[a-z0-9-_]{3,64}$/i';
  if (!empty($node->server_id) && !preg_match($pattern, $node->server_id)) {
    form_set_error('server_id', t('Server ID should be alphanumeric strings with hyphens and underscores, 3-64 characters long.'));
  }

  // Ensure no duplicate server_id.
  $result = db_result(db_query("SELECT COUNT(*) FROM {oauth2_servers} AS osrv INNER JOIN {node} AS n ON osrv.vid = n.vid WHERE osrv.server_id = '%s' AND n.nid <> %d", $node->server_id, $node->nid));
  if ($result != 0) {
    form_set_error('server_id', t('This Server ID had beed used by other server identifer.'));
  }
}*/

/**
 * Add a record
 */
/*
function oauth2_server_insert($oauth2_server) {
  drupal_write_record('oauth2_servers', $oauth2_server);
}*/

/**
 * Update/Add a record
 */
function oauth2_server_update($oauth2_server) {
  if ($oauth2_server['sid'] == NULL) {
    drupal_write_record('oauth2_servers', $oauth2_server);
  } else {
    drupal_write_record('oauth2_servers', $oauth2_server, 'sid');
  }
}

/**
 * Implementation of hook_delete().
 */
function oauth2_server_delete($sid) {
  db_query("DELETE FROM {oauth2_servers} WHERE sid = %d", $sid);
}

/**
 * Implementation of hook_load().
 */
function oauth2_server_load($sid) {
  //$additions = db_fetch_object(db_query("SELECT server_id, client_id, client_secret, base_uri, authorize_uri, access_token_uri FROM {oauth2_servers} WHERE vid = %d", $node->vid));
  //return $additions;
  return entity_load('oauth2_server',$sid);
}


/**
 * Implementation of hook_view().
 */
/*
function oauth2_server_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);

  $node->content['server_id'] = array(
    '#value' => theme('oauth2_server_server_id', $node->server_id),
    '#weight' => -10,
  );
  $node->content['base_uri'] = array(
    '#value' => theme('oauth2_server_base_uri', $node->base_uri),
    '#weight' => -9,
  );
  $node->content['client_id'] = array(
    '#value' => theme('oauth2_server_client_id', $node->client_id),
    '#weight' => -8,
  );
  $node->content['client_secret'] = array(
    '#value' => theme('oauth2_server_client_secret', $node->client_secret),
    '#weight' => -7,
  );
  $node->content['authorize_uri'] = array(
    '#value' => theme('oauth2_server_authorize_uri', $node->authorize_uri),
    '#weight' => -6,
  );
  $node->content['access_token_uri'] = array(
    '#value' => theme('oauth2_server_access_token_uri', $node->access_token_uri),
    '#weight' => -5,
  );

  return $node;
}*/

/**
 * Implementation of hook_theme().
 */
function oauth2_server_theme() {
  return array(
    'oauth2_server_server_id' => array(
      'arguments' => array('server_id' => '', 'teaser' => 0, 'page' => 0),
    ),
    'oauth2_server_base_uri' => array(
      'arguments' => array('base_uri' => '', 'teaser' => 0, 'page' => 0),
    ),
    'oauth2_server_client_id' => array(
      'arguments' => array('client_id' => '', 'teaser' => 0, 'page' => 0),
    ),
    'oauth2_server_client_secret' => array(
      'arguments' => array('client_secret' => '', 'teaser' => 0, 'page' => 0),
    ),
    'oauth2_server_authorize_uri' => array(
      'arguments' => array('authorize_uri' => '', 'teaser' => 0, 'page' => 0),
    ),
    'oauth2_server_access_token_uri' => array(
      'arguments' => array('access_token_uri' => '', 'teaser' => 0, 'page' => 0),
    ),
  );
}

/**
 * Returns HTML for field server_id.
 *
 * @ingroup themeable
 */
function theme_oauth2_server_server_id($server_id, $teaser = 0, $page = 0) {
  $output = '<div class="oauth2_server-info server_id">';
  $output .= t('Server ID: @server_id', array('@server_id' => $server_id));
  $output .= '</div>';
  return $output;
}

/**
 * Returns HTML for field base_uri.
 *
 * @ingroup themeable
 */
function theme_oauth2_server_base_uri($base_uri, $teaser = 0, $page = 0) {
  $output = '<div class="oauth2_server-info base_uri">';
  $output .= t('Base URI: @base_uri', array('@base_uri' => $base_uri));
  $output .= '</div>';
  return $output;
}

/**
 * Returns HTML for field client_id.
 *
 * @ingroup themeable
 */
function theme_oauth2_server_client_id($client_id, $teaser = 0, $page = 0) {
  $output = '<div class="oauth2_server-info client_id">';
  $output .= t('Application ID: @client_id', array('@client_id' => $client_id));
  $output .= '</div>';
  return $output;
}

/**
 * Returns HTML for field client_secret.
 *
 * @ingroup themeable
 */
function theme_oauth2_server_client_secret($client_secret, $teaser = 0, $page = 0) {
  $output = '<div class="oauth2_server-info client_secret">';
  $output .= t('Application Secret: @client_secret', array('@client_secret' => $client_secret));
  $output .= '</div>';
  return $output;
}

/**
 * Returns HTML for field authorize_uri.
 *
 * @ingroup themeable
 */
function theme_oauth2_server_authorize_uri($authorize_uri, $teaser = 0, $page = 0) {
  $output = '<div class="oauth2_server-info authorize_uri">';
  $output .= t('End-user authorization endpoint: @authorize_uri', array('@authorize_uri' => $authorize_uri));
  $output .= '</div>';
  return $output;
}

/**
 * Returns HTML for field access_token_uri.
 *
 * @ingroup themeable
 */
function theme_oauth2_server_access_token_uri($access_token_uri, $teaser = 0, $page = 0) {
  $output = '<div class="oauth2_server-info access_token_uri">';
  $output .= t('Token endpoint: @access_token_uri', array('@access_token_uri' => $access_token_uri));
  $output .= '</div>';
  return $output;
}
